(defun pow (n exp) 
    (cond
        ((= n 0) 0)
        ((= exp 0) 1)
        ((< exp 0) (/ 1 (pow-fun n (- 0 exp)))) 
        (t (pow-fun n exp))
    ))

(defun pow-fun (n exp) 
    (cond
        ((= exp 0) 1)
        (t (* n (pow-fun n (- exp 1))))
    ))

(assert (equal (pow -1 0) 1))
(assert (equal (pow 1 -2) 1))
(assert (equal (pow 1 0) 1))
(assert (equal (pow 1 2) 1))
(assert (equal (pow 2 -4) 1/16))
(assert (equal (pow 2 -3) 1/8))
(assert (equal (pow 2 -2) 1/4))
(assert (equal (pow 2 -1) 1/2))
(assert (equal (pow 2 0) 1))
(assert (equal (pow 2 1) 2))
(assert (equal (pow 2 2) 4))
(assert (equal (pow 2 3) 8))
(assert (equal (pow 2 4) 16))
(assert (equal (pow 2 5) 32))
(assert (equal (pow -2 1) -2))
(assert (equal (pow -2 2) 4))
(assert (equal (pow -2 3) -8))
(assert (equal (pow -2 4) 16))
(assert (equal (pow -2 0) 1))
(assert (equal (pow -2 -1) -1/2))
(assert (equal (pow -2 -2) 1/4))
(assert (equal (pow -2 -3) -1/8))
(assert (equal (pow -2 -4) 1/16))
(assert (equal (pow 3 4) 81))
(assert (equal (pow 3 -4) 1/81))